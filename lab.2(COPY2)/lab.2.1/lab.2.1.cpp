#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <windows.h>
#include "atlstr.h"
//1
using namespace std;

int main(int argc, char* argv[])
{
	//конфиг
	TCHAR path1[] = L"C:\\Windows\\notepad.exe";
	TCHAR path2[] = L"C:\\Users\\нищий на знания\\Desktop\\винда лабы\\lab.2(COPY2)\\log.txt";
	TCHAR path3[] = L"C:\\Users\\нищий на знания\\Desktop\\винда лабы\\lab.2(COPY2)\\lab.2.2\\Debug\\lb.2.2.exe";


	setlocale(0, "ru");
	cout << "главный процесс запущен" << endl;

	//структура безопасности - для доступа к дескриптору созданных процессов +---------
	SECURITY_ATTRIBUTES sa;
	sa.nLength = sizeof(SECURITY_ATTRIBUTES);
	sa.bInheritHandle = TRUE;
	sa.lpSecurityDescriptor = NULL;

	// --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- 
	//notepad.exe

	STARTUPINFO si1;// структура,чтобы определить оконный терминал, рабочий стол, стандартный дескриптор и внешний вид основного окна для нового процесса.
	ZeroMemory(&si1, sizeof(si1));// перед запуском консольного процесса все поля структуры си должны быть заполнены 0 и это делается в данной строке 
	si1.cb = sizeof(si1);//выводит окно с размером по умолчанию
	PROCESS_INFORMATION pi1; //информация о недавно созданном процессе и его первичном потоке. 

	if (!CreateProcess(
		path1,
		NULL, //cmd -123
		&sa, //!!! указ. на структуру безоп. (атрибуты безопасности) +---------
		NULL, //тоже но поток
		FALSE, // флаг наследование текущ. процесса
		0,     // флаги способа созд. процесса
		NULL, // указ. на блок среды
		NULL, // текущ. диск (адрес)
		&si1, // указ. на струтуру сис. инфо.
		&pi1)) // указ на структ. проц. инфо.
	{
		cerr << "Процесс блокнот вернул ошибку: " << GetLastError() << endl;
	}
	else cout << "процесс блокнот запущен: ";
	HANDLE desc1 = pi1.hProcess;
	cout << (int)desc1 << endl;



	// --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- 
	//log.txt

	STARTUPINFO si2;// структура,чтобы определить оконный терминал, рабочий стол, стандартный дескриптор и внешний вид основного окна для нового процесса.
	ZeroMemory(&si2, sizeof(si2));// перед запуском консольного процесса все поля структуры си должны быть заполнены 0 и это делается в данной строке 
	si2.cb = sizeof(si2);//выводит окно с размером по умолчанию
	PROCESS_INFORMATION pi2; //информация о недавно созданном процессе и его первичном потоке. 

	HANDLE desc2 = CreateFile(
		path2,
		GENERIC_WRITE,
		FILE_SHARE_READ,
		&sa,                    // +---------
		OPEN_ALWAYS,
		FILE_ATTRIBUTE_NORMAL,
		NULL);

	cout << "процесс лог-файл запущен" << endl;

	// --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- 
	//subProcces

	STARTUPINFO si;// структура,чтобы определить оконный терминал, рабочий стол, стандартный дескриптор и внешний вид основного окна для нового процесса.
	ZeroMemory(&si, sizeof(si));// перед запуском консольного процесса все поля структуры си должны быть заполнены 0 и это делается в данной строке 
	si.cb = sizeof(si);//выводит окно с размером по умолчанию
	PROCESS_INFORMATION pi; //информация о недавно созданном процессе и его первичном потоке. 




	TCHAR czCommandLine[MAX_PATH] = {};
	TCHAR a[64] = {};
	TCHAR b[64] = {};
	//перевод из числа в TCHAR
	_stprintf(a, TEXT("%d"), (int)desc1);
	_stprintf(b, TEXT("%d"), (int)desc2);
	//объеденение ""строк""
	_tcscat_s(czCommandLine, MAX_PATH, a);
	_tcscat_s(czCommandLine, MAX_PATH, TEXT(" "));
	_tcscat_s(czCommandLine, MAX_PATH, b);

	cout << "ASASASD: " << czCommandLine;

	//TCHAR czCommandLine[] = L"des";
	if (!CreateProcess(
		path3,
		czCommandLine, //cmd -123
		&sa, //!!! указ. на структуру безоп. (атрибуты безопасности)
		NULL, //тоже но поток
		TRUE, // флаг наследование текущ. процесса
		0,     // флаги способа созд. процесса
		NULL, // указ. на блок среды
		NULL, // текущ. диск (адрес)
		&si, // указ. на струтуру сис. инфо.
		&pi)) // указ на структ. проц. инфо.
	{
		cerr << "под-Процесс вернул ошибку: " << GetLastError() << endl;
	}
	else cout << "под-процесс 1 запущен" << endl;
	// --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- 

	system("pause");
}



